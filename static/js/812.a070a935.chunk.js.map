{"version":3,"file":"static/js/812.a070a935.chunk.js","mappings":"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","sources":["webpack://social-network/./src/components/Content/Dialogs/Dialogs.module.css?5cdb","webpack://social-network/./src/components/Content/Dialogs/Messages/Messages.module.css?d7a9","webpack://social-network/./src/components/Content/Dialogs/Messages/NewMessage/NewMessage.module.css?df02","components/Content/Dialogs/Messages/NewMessage/NewMessage.tsx","components/Content/Dialogs/Messages/NewMessage/useNewMessage/useNewMessage.ts","webpack://social-network/./src/components/Content/Dialogs/Messages/Message/Message.module.css?4d32","components/Content/Dialogs/Messages/Message/Message.tsx","components/Content/Dialogs/Messages/Message/useUserMessage/useUserMessage.ts","webpack://social-network/./src/components/Content/Dialogs/Messages/FriendMessage/FriendMessage.module.css?95cc","components/Content/Dialogs/Messages/FriendMessage/FriendMessage.tsx","components/Content/Dialogs/Messages/FriendMessage/useFriendMessage/useFriendMessage.ts","store/reducers/userMessagesReducer/userMessagesSelectors.ts","store/reducers/friendsMessagesReducer/friendsMessagesSelectors.ts","components/Content/Dialogs/Messages/Messages.tsx","webpack://social-network/./src/components/Content/Dialogs/Contacts/Contacts.module.css?eb09","webpack://social-network/./src/components/Content/Dialogs/Contacts/Contact/Contact.module.css?e627","components/Content/Dialogs/Contacts/Contact/Contact.tsx","components/Content/Dialogs/Contacts/Contacts.tsx","components/Content/Dialogs/Dialogs.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"title\":\"Dialogs_title__g-IiL\",\"main\":\"Dialogs_main__s4Ak5\"};","// extracted by mini-css-extract-plugin\nexport default {\"container\":\"Messages_container__XYGtp\"};","// extracted by mini-css-extract-plugin\nexport default {\"container\":\"NewMessage_container__CTujU\",\"textarea\":\"NewMessage_textarea__8cZEW\",\"buttons\":\"NewMessage_buttons__ADHBS\"};","import React, { FC } from \"react\";\nimport styles from \"./NewMessage.module.css\";\nimport { Textarea } from \"components/shared/Textarea/Textarea\";\nimport { Button } from \"components/shared/Button/Button\";\nimport { useNewMessage } from \"./useNewMessage/useNewMessage\";\n\nexport const NewMessage: FC = () => {\n    const { title, onTitleInputChange, onSendBtnClick, onCancelBtnClick } = useNewMessage();\n\n    return (\n        <div className={styles.container}>\n            <Textarea\n                value={title}\n                callback={onTitleInputChange}\n                placeholder=\"Write new message\"\n                style={styles.textarea}\n            />\n            <div className={styles.buttons}>\n                <Button title={\"Send\"} callback={onSendBtnClick} type={\"main\"} isDisabled={!title.trim()} />\n                <Button title={\"Cancel\"} callback={onCancelBtnClick} type={\"secondary\"} isDisabled={!title.trim()} />\n            </div>\n        </div>\n    );\n};\n","import { ChangeEvent, useCallback, useState } from \"react\";\nimport { addUserMessageTC } from \"store/reducers/userMessagesReducer/userMessagesReducer\";\nimport { useAppDispatch } from \"store/reduxStore\";\n\nexport const useNewMessage = () => {\n    const [title, setTitle] = useState(\"\");\n    const dispatch = useAppDispatch();\n\n    const onTitleInputChange = useCallback((e: ChangeEvent<HTMLTextAreaElement>) => {\n        setTitle(e.currentTarget.value);\n    }, []);\n    const onSendBtnClick = useCallback(() => {\n        dispatch(addUserMessageTC(title));\n        setTitle(\"\");\n    }, [dispatch, title]);\n    const onCancelBtnClick = useCallback(() => {\n        setTitle(\"\");\n    }, []);\n\n    return {\n        title,\n        onTitleInputChange,\n        onSendBtnClick,\n        onCancelBtnClick,\n    };\n};\n","// extracted by mini-css-extract-plugin\nexport default {\"container\":\"Message_container__rAoom\",\"userInfo\":\"Message_userInfo__MignT\",\"userAvatar\":\"Message_userAvatar__pRD-b\",\"messageContent\":\"Message_messageContent__G0RII\",\"message\":\"Message_message__Pg7MM\",\"delBtn\":\"Message_delBtn__pzfgc\"};","import React, { FC, memo } from \"react\";\nimport styles from \"./Message.module.css\";\nimport { UserMessage } from \"interfaces/types\";\nimport { Textarea } from \"components/shared/Textarea/Textarea\";\nimport { Button } from \"components/shared/Button/Button\";\nimport { defaultAvatar } from \"images/images\";\nimport { useUserMessage } from \"./useUserMessage/useUserMessage\";\n\ntype MessageProps = {\n    message: UserMessage;\n};\n\nexport const Message: FC<MessageProps> = memo(({ message }) => {\n    const {\n        user,\n        messageTitle,\n        messageViewMode,\n        setMessageTitle,\n        setMessageViewMode,\n        updateMessageTitle,\n        deleteMessage,\n    } = useUserMessage(message);\n\n    if (!user) {\n        return <></>;\n    } else {\n        return (\n            <div className={styles.container}>\n                <div className={styles.userInfo}>\n                    <img\n                        className={styles.userAvatar}\n                        src={user.photos.large || user.photos.small || defaultAvatar}\n                        alt=\"user_avatar\"\n                    />\n                    <span className={styles.time}>{message.time}</span>\n                </div>\n                <div className={styles.messageContent}>\n                    {messageViewMode === \"readonly\" && (\n                        <p onDoubleClick={() => setMessageViewMode(\"updating\")} className={styles.message}>\n                            {message.message}\n                        </p>\n                    )}\n                    {messageViewMode === \"updating\" && (\n                        <Textarea\n                            value={messageTitle}\n                            callback={(e) => setMessageTitle(e.currentTarget.value)}\n                            onBlurCallback={updateMessageTitle}\n                            autoFocus\n                            style={styles.message}\n                        />\n                    )}\n                    <Button title={\"x\"} callback={deleteMessage} type={\"secondary\"} style={styles.delBtn} />\n                </div>\n            </div>\n        );\n    }\n});\n","import { useCallback, useState } from \"react\";\nimport { useAppDispatch, useAppSelector } from \"store/reduxStore\";\nimport { UserMessage } from \"interfaces/types\";\nimport { deleteMessageTC, updateMessageTitleTC } from \"store/reducers/userMessagesReducer/userMessagesReducer\";\nimport { selectUserProfile } from \"store/reducers/profileReducer/profileSelectors\";\n\nexport const useUserMessage = (message: UserMessage) => {\n    const [messageViewMode, setMessageViewMode] = useState<\"readonly\" | \"updating\">(\"readonly\");\n    const [messageTitle, setMessageTitle] = useState(message.message);\n    const dispatch = useAppDispatch();\n    const user = useAppSelector(selectUserProfile);\n\n    const updateMessageTitle = useCallback(() => {\n        dispatch(updateMessageTitleTC(message.messageId, messageTitle));\n        setMessageViewMode(\"readonly\");\n    }, [dispatch, message.messageId, messageTitle]);\n    const deleteMessage = useCallback(() => {\n        dispatch(deleteMessageTC(message.messageId));\n    }, [dispatch, message.messageId]);\n    return {\n        user,\n        messageTitle,\n        messageViewMode,\n        setMessageTitle,\n        setMessageViewMode,\n        updateMessageTitle,\n        deleteMessage,\n    };\n};\n","// extracted by mini-css-extract-plugin\nexport default {\"container\":\"FriendMessage_container__aihFi\",\"userInfo\":\"FriendMessage_userInfo__wUkk2\",\"userAvatar\":\"FriendMessage_userAvatar__Nq1nk\",\"messageContent\":\"FriendMessage_messageContent__8J2Le\",\"message\":\"FriendMessage_message__DcAyX\",\"delBtn\":\"FriendMessage_delBtn__vpXHQ\"};","import React, { FC, memo } from \"react\";\nimport styles from \"./FriendMessage.module.css\";\nimport { FriendMessage } from \"interfaces/types\";\nimport { Button } from \"components/shared/Button/Button\";\nimport { defaultAvatar } from \"images/images\";\nimport { useFriendMessage } from \"./useFriendMessage/useFriendMessage\";\n\ntype FriendMessageProps = {\n    message: FriendMessage;\n};\n\nexport const FriendsMessage: FC<FriendMessageProps> = memo(({ message }) => {\n    const { deleteFriendMessage } = useFriendMessage(message);\n\n    return (\n        <div className={styles.container}>\n            <div className={styles.userInfo}>\n                <img className={styles.userAvatar} src={defaultAvatar} alt=\"user_avatar\" />\n                <span className={styles.time}>{message.time}</span>\n            </div>\n            <div className={styles.messageContent}>\n                <p className={styles.message}>{message.message}</p>\n                <Button title={\"x\"} callback={deleteFriendMessage} type={\"secondary\"} style={styles.delBtn} />\n            </div>\n        </div>\n    );\n});\n","import { useCallback } from \"react\";\nimport { deleteFriendMessageTC } from \"store/reducers/friendsMessagesReducer/friendsMessagesReducer\";\nimport { FriendMessage } from \"interfaces/types\";\nimport { useAppDispatch } from \"store/reduxStore\";\n\nexport const useFriendMessage = (message: FriendMessage) => {\n    const dispatch = useAppDispatch();\n    const deleteFriendMessage = useCallback(() => {\n        dispatch(deleteFriendMessageTC(message.messageId));\n    }, [dispatch, message.messageId]);\n\n    return { deleteFriendMessage };\n};\n","import { RootState } from \"store/reduxStore\";\nimport { UserMessagesData } from \"interfaces/types\";\n\nexport const selectUserMessages = (state: RootState): UserMessagesData => state.userMessagesData;\n","import { RootState } from \"store/reduxStore\";\nimport { FriendsMessagesData } from \"interfaces/types\";\n\nexport const selectFriendsMessages = (state: RootState): FriendsMessagesData => state.friendsMessagesData;\n","import React, { FC } from \"react\";\nimport styles from \"./Messages.module.css\";\nimport { NewMessage } from \"./NewMessage/NewMessage\";\nimport { Message } from \"./Message/Message\";\nimport { FriendsMessage } from \"./FriendMessage/FriendMessage\";\nimport { useAppSelector } from \"store/reduxStore\";\nimport { selectUserMessages } from \"store/reducers/userMessagesReducer/userMessagesSelectors\";\nimport { selectFriendsMessages } from \"store/reducers/friendsMessagesReducer/friendsMessagesSelectors\";\n\nexport const Messages: FC = () => {\n    const userMessageData = useAppSelector(selectUserMessages);\n    const friendsMessagesData = useAppSelector(selectFriendsMessages);\n\n    return (\n        <div className={styles.container}>\n            <NewMessage />\n            {userMessageData.map((message) => (\n                <Message key={message.messageId} message={message} />\n            ))}\n            {friendsMessagesData.map((message) => (\n                <FriendsMessage key={message.messageId} message={message} />\n            ))}\n        </div>\n    );\n};\n","// extracted by mini-css-extract-plugin\nexport default {\"container\":\"Contacts_container__OQyKa\",\"list\":\"Contacts_list__IbqR4\"};","// extracted by mini-css-extract-plugin\nexport default {\"container\":\"Contact_container__4t606\",\"link\":\"Contact_link__RRqq0\",\"userAvatar\":\"Contact_userAvatar__j2YR2\"};","import React, { FC, memo } from \"react\";\nimport styles from \"./Contact.module.css\";\nimport { NavLink } from \"react-router-dom\";\nimport { User } from \"interfaces/types\";\nimport { defaultAvatar } from \"images/images\";\n\ntype ContactPropsType = {\n    friend: User;\n};\n\nexport const Contact: FC<ContactPropsType> = memo(({ friend }) => {\n    return (\n        <li className={styles.container}>\n            <NavLink to={`/dialogs/${friend.id}`}>\n                <img alt=\"userAvatar\" src={friend.photos.small || defaultAvatar} className={styles.userAvatar} />\n                <span>{friend.name}</span>\n            </NavLink>\n        </li>\n    );\n});\n","import React, { FC } from \"react\";\nimport styles from \"./Contacts.module.css\";\nimport { Contact } from \"./Contact/Contact\";\nimport { useAppSelector } from \"store/reduxStore\";\nimport { selectFriends } from \"store/reducers/friendsReducer/friendsSelectors\";\n\nexport const Contacts: FC = () => {\n    const friends = useAppSelector(selectFriends);\n    return (\n        <div className={styles.container}>\n            <ul className={styles.list}>\n                {friends.map((friend) => (\n                    <Contact key={friend.id} friend={friend} />\n                ))}\n            </ul>\n        </div>\n    );\n};\n","import React, { FC } from \"react\";\nimport styles from \"./Dialogs.module.css\";\nimport { Messages } from \"./Messages/Messages\";\nimport { Contacts } from \"./Contacts/Contacts\";\nimport { useAppSelector } from \"store/reduxStore\";\nimport { Navigate } from \"react-router-dom\";\nimport { selectIsLogin } from \"store/reducers/authReducer/authSelectors\";\n\nconst Dialogs: FC = () => {\n    const isLogin = useAppSelector(selectIsLogin);\n\n    if (!isLogin) {\n        return <Navigate to={\"/login\"} />;\n    }\n\n    return (\n        <div className={styles.container}>\n            <h2 className={styles.title}>DIALOGS</h2>\n            <div className={styles.main}>\n                <Contacts />\n                <Messages />\n            </div>\n        </div>\n    );\n};\n\nexport default Dialogs;\n"],"names":["NewMessage","useState","title","setTitle","dispatch","useAppDispatch","onTitleInputChange","useCallback","e","currentTarget","value","onSendBtnClick","addUserMessageTC","onCancelBtnClick","useNewMessage","className","styles","Textarea","callback","placeholder","style","Button","type","isDisabled","trim","Message","memo","message","messageViewMode","setMessageViewMode","messageTitle","setMessageTitle","user","useAppSelector","selectUserProfile","updateMessageTitle","updateMessageTitleTC","messageId","deleteMessage","deleteMessageTC","useUserMessage","src","photos","large","small","defaultAvatar","alt","time","onDoubleClick","onBlurCallback","autoFocus","FriendsMessage","deleteFriendMessage","deleteFriendMessageTC","useFriendMessage","selectUserMessages","state","userMessagesData","selectFriendsMessages","friendsMessagesData","Messages","userMessageData","map","Contact","friend","to","id","name","Contacts","friends","selectFriends","selectIsLogin"],"sourceRoot":""}